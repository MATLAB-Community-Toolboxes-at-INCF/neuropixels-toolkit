classdef KiloSort < npxtoolkit.tasks.TaskBase
    %KiloSort Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        Info
        Config
        Output
    end
    
    methods
        function obj = KiloSort(taskInfo, taskConfig)
            obj.Info = taskInfo;
            obj.Config = taskConfig;
        end
        
        function execute(obj)
            disp(strcat("Running task: ", obj.Info));
            config = obj.Config;

            prb = '0'; % TODO - probe number, pass from task init
            brain_region = 'cortex'; % TODO - probe number, pass from task init

            runFolderName = strcat(config.RunName, '_g', config.GateIdx);
            catGTResultFolderName = strcat('catgt_', runFolderName);
            probFolderName = strcat(runFolderName, '_imec', prb);
            probFolder = fullfile(config.NpxDir, runFolderName, probFolderName);
            inputDataDirectory = probFolder;
            fileName = strcat(runFolderName, '_tcat.imec', prb, '.ap.bin');
            metaName = strcat(runFolderName, '_tcat.imec', prb, '.ap.meta');

            inputMetaFullpath = fullfile(config.NpxDir, catGTResultFolderName, probFolderName, metaName);
            continuousFile = fullfile(config.NpxDir, catGTResultFolderName, probFolderName, fileName);
            outputName = strcat('imec', prb, '_ks2');
            if any(strcmp('kilosort_postprocessing', config.Modules)) || any(strcmp('noise_templates', config.Modules))
                ks_make_copy = true;
            else
                ks_make_copy = false;
            end
            kilosort_output_dir = fullfile(inputDataDirectory, outputName);
            
            ksTh = getfield(config.KsThDict, brain_region);
            refPerMS = getfield(config.RefPerMSDict, brain_region);
            disp(strcat('ksTh: ', ksTh, ' ,refPerMS: ', string(refPerMS)));

            moduleInputJson = fullfile(config.JsonDir, strcat(runFolderName, '-input.json'));
            disp(moduleInputJson);

            info = py.py_modules.caller.createInputJson(...
                pyargs(...
                    'output_file', moduleInputJson,...
                    'ecephys_directory', config.EcephysDir,...
                    'kilosort_repository', config.KilosortRepo,...
                    'KS2ver', config.KSver,...
                    'npy_matlab_repository', config.NpyMatlabRepo,...
                    'catGTPath', config.CatGTPath,...
                    'tPrime_path', config.TPrimePath,...
                    'cWaves_path', config.CWavesPath,...
                    'kilosort_output_tmp', config.KilosortOutputTmp,...
                    'npx_directory', config.NpxDir,...
                    'continuous_file', continuousFile,...
                    'spikeGLX_data', config.SpikeGLXData,...
                    'input_meta_path', inputMetaFullpath,...
                    'kilosort_output_directory', config.CatGTDest,...
                    'noise_template_use_rf', config.NoiseTemplateUseRf,...
                    'catGT_run_name', config.RunName,...
                    'gate_string', config.GateIdx,...
                    'probe_string', prb,...
                    'ks_remDup', config.KsRemDup,...                   
                    'ks_finalSplits', config.KsFinalSplits,...
                    'ks_labelGood', config.KsLabelGood,...
                    'ks_saveRez', config.KsSaveRez,...
                    'ks_copy_fproc', config.KsCopyFporc,...
                    'ks_minfr_goodchannels', config.KsMinfrGoodChannels,...                  
                    'ks_whiteningRadius_um', config.KsWhiteningRadiusUm,...
                    'ks_Th', ksTh,...
                    'ks_CSBseed', config.KsCSBseed,...
                    'ks_LTseed', config.KsLTseed,...
                    'ks_templateRadius_um', config.KsTemplateRadiusUm,...
                    'extracted_data_directory', config.CatGTDest,...
                    'event_ex_param_str',  config.EventExParamStr,...
                    'c_Waves_snr_um', config.CWavesSnrUm,...                   
                    'qm_isi_thresh', (refPerMS/1000)...
                )...
            );

            for i=1:length(config.Modules)
                moduleName = config.Modules{i};
                outputJson = fullfile(config.JsonDir, strcat(runFolderName, '-', moduleName, '-output.json'));
                disp(outputJson);
                % TODO - reduce python
                params = strcat("-W ignore -m ecephys_spike_sorting.modules.", moduleName,...
                                " --input_json ", moduleInputJson,...
                                " --output_json ", outputJson);
                disp(params);
                py.py_modules.caller.call_python(params);
            end
        end
    end
end

