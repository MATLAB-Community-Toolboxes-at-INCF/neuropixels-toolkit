classdef KiloSort < npxtoolkit.tasks.TaskBase
    %KiloSort Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        Info
        Probe
        BrainRegion
        CommonConfig
        CustomConfig
        Output
        L
    end
    
    methods
        function obj = KiloSort(taskInfo, probe, brainRegion, taskConfig, logger)
            obj.Info = taskInfo;
            obj.Probe = probe;
            obj.BrainRegion = brainRegion;
            taskConfig.Configs.noiseTemplateUseRf = str2num(taskConfig.Configs.noiseTemplateUseRf);
            obj.CustomConfig = taskConfig;
            obj.L = logger;
        end
        
        function execute(obj)
            obj.L.info("KiloSort.m", strcat("Running task: ", obj.Info));
            names = [fieldnames(obj.CommonConfig.Tools); fieldnames(obj.CommonConfig.Data); fieldnames(obj.CustomConfig.Configs)];
            config = cell2struct([struct2cell(obj.CommonConfig.Tools); struct2cell(obj.CommonConfig.Data); struct2cell(obj.CustomConfig.Configs)], names, 1);

            prb = obj.Probe;
            brainRegion = obj.BrainRegion;

            runFolderName = strcat(config.runName, '_g', config.gateIdx);
            catGTResultFolderName = strcat('catgt_', runFolderName);
            probFolderName = strcat(runFolderName, '_imec', prb);
            probFolder = fullfile(config.npxDir, runFolderName, probFolderName);
            inputDataDirectory = probFolder;
            fileName = strcat(runFolderName, '_tcat.imec', prb, '.ap.bin');
            metaName = strcat(runFolderName, '_tcat.imec', prb, '.ap.meta');

            inputMetaFullpath = fullfile(config.npxDir, catGTResultFolderName, probFolderName, metaName);
            continuousFile = fullfile(config.npxDir, catGTResultFolderName, probFolderName, fileName);
            outputName = strcat('imec', prb, '_ks2');
            if any(strcmp('kilosort_postprocessing', config.modules)) || any(strcmp('noise_templates', config. modules))
                ks_make_copy = true;
            else
                ks_make_copy = false;
            end
            kilosort_output_dir = fullfile(inputDataDirectory, outputName);
            
            ksTh = getfield(config.ksThDict, brainRegion);
            refPerMS = getfield(config.refPerMSDict, brainRegion);
            obj.L.debug(strcat("KiloSort.m - ", obj.Info), strcat('ksTh: ', ksTh, ' ,refPerMS: ', string(refPerMS)));

            moduleInputJson = fullfile(config.jsonDir, strcat(runFolderName, '-input.json'));

            info = py.py_modules.caller.createInputJson(...
                pyargs(...
                    'output_file', moduleInputJson,...
                    'ecephys_directory', config.ecephysDir,...
                    'kilosort_repository', config.kilosortRepo,...
                    'KS2ver', config.KSver,...
                    'npy_matlab_repository', config.npyMatlabRepo,...
                    'catGTPath', config.catGTPath,...
                    'tPrime_path', config.tPrimePath,...
                    'cWaves_path', config.cWavesPath,...
                    'kilosort_output_tmp', config.kilosortOutputTmp,...
                    'npx_directory', config.npxDir,...
                    'continuous_file', continuousFile,...
                    'spikeGLX_data', config.spikeGLXData,...
                    'input_meta_path', inputMetaFullpath,...
                    'kilosort_output_directory', config.catGTDest,...
                    'noise_template_use_rf', config.noiseTemplateUseRf,...
                    'catGT_run_name', config.runName,...
                    'gate_string', config.gateIdx,...
                    'probe_string', prb,...
                    'ks_remDup', config.ksRemDup,...                   
                    'ks_finalSplits', config.ksFinalSplits,...
                    'ks_labelGood', config.ksLabelGood,...
                    'ks_saveRez', config.ksSaveRez,...
                    'ks_copy_fproc', config.ksCopyFporc,...
                    'ks_minfr_goodchannels', config.ksMinfrGoodChannels,...                  
                    'ks_whiteningRadius_um', config.ksWhiteningRadiusUm,...
                    'ks_Th', ksTh,...
                    'ks_CSBseed', config.ksCSBseed,...
                    'ks_LTseed', config.ksLTseed,...
                    'ks_templateRadius_um', config.ksTemplateRadiusUm,...
                    'extracted_data_directory', config.catGTDest,...
                    'event_ex_param_str',  config.eventExParamStr,...
                    'c_Waves_snr_um', config.cWavesSnrUm,...                   
                    'qm_isi_thresh', (refPerMS/1000)...
                )...
            );

            for i=1:length(config.modules)
                moduleName = config.modules{i};
                obj.L.info(strcat("KiloSort.m - ", obj.Info), strcat("Running module: ", moduleName));
                outputJson = fullfile(config.jsonDir, strcat(runFolderName, '-', moduleName, '-output.json'));
                % TODO - reduce python
                params = strcat("-W ignore -m ecephys_spike_sorting.modules.", moduleName,...
                                " --input_json ", moduleInputJson,...
                                " --output_json ", outputJson);
                obj.L.info(strcat("KiloSort.m - ", obj.Info), strcat("python ", params));
                py.py_modules.caller.call_python(params);
                obj.L.info(strcat("KiloSort.m - ", obj.Info), strcat("Module: ", moduleName, "Done!"));
            end
            obj.L.info(strcat("KiloSort.m - ", obj.Info), "Done!");
        end
    end
end

