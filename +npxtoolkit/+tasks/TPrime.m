classdef TPrime < npxtoolkit.tasks.TaskBase
    properties
        Info
        Probe
        CommonConfig
        CustomConfig
        Output
        L
    end

    methods
        function obj = TPrime(taskInfo, probe, taskConfig, logger)
            obj.Info = taskInfo;
            obj.Probe = probe;
            taskConfig.Configs.runTPrime = str2num(taskConfig.Configs.runTPrime);
            taskCOnfig.Configs.tPrime3A = str2num(taskConfig.Configs.tPrime3A);
            obj.CustomConfig = taskConfig;
            obj.L = logger;
        end
        
        function execute(obj)
            obj.L.info("TPrime.m", strcat("Running task: ", obj.Info));
            names = [fieldnames(obj.CommonConfig.Tools); fieldnames(obj.CommonConfig.Data); fieldnames(obj.CustomConfig.Configs)];
            config = cell2struct([struct2cell(obj.CommonConfig.Tools); struct2cell(obj.CommonConfig.Data); struct2cell(obj.CustomConfig.Configs)], names, 1);

            prb = obj.Probe;

            runFolderName = strcat(config.runName, '_g', config.gateIdx);
            catGTResultFolderName = strcat('catgt_', runFolderName);
            probFolderName = strcat(runFolderName, '_imec', prb);
            probFolder = fullfile(config.npxDir, runFolderName, probFolderName);
            inputDataDirectory = probFolder;
            fileName = strcat(runFolderName, '_tcat.imec', prb, '.ap.bin');
            metaName = strcat(runFolderName, '_tcat.imec', prb, '.ap.meta');

            inputMetaFullpath = fullfile(config.npxDir, catGTResultFolderName, probFolderName, metaName);
            continuousFile = fullfile(config.npxDir, catGTResultFolderName, probFolderName, fileName);

            taskName = strcat(config.runName, '_TPrime');
            inputJson = fullfile(config.jsonDir, strcat(taskName, '-input.json'));
            outputJson = fullfile(config.jsonDir, strcat(taskName, '-output.json'));

            % build list of sync extractions to send to TPrime
            syncExtract = strcat('-SY=', prb, ',-1,6,500');
            imExList = strcat(config.imExList, ' ', syncExtract);
            obj.L.debug(strcat("KiloSort.m - ", obj.Info), strcat('imExList: ', imExList));
            
            info = py.py_modules.caller.createInputJson(...
                pyargs(...
                    'output_file', inputJson,...
                    'ecephys_directory', config.ecephysDir,...
                    'kilosort_repository', config.kilosortRepo,...
                    'KS2ver', config.KSver,...
                    'npy_matlab_repository', config.npyMatlabRepo,...
                    'catGTPath', config.catGTPath,...
                    'tPrime_path', config.tPrimePath,...
                    'cWaves_path', config.cWavesPath,...
                    'kilosort_output_tmp', config.kilosortOutputTmp,...
                    'npx_directory', config.npxDir,...
                    'continuous_file', continuousFile,...
                    'spikeGLX_data', config.spikeGLXData,...
                    'input_meta_path', inputMetaFullpath,...
                    'kilosort_output_directory', config.catGTDest,...
                    'extracted_data_directory', config.catGTDest,...
                    'tPrime_im_ex_list', imExList,...
                    'tPrime_ni_ex_list', config.niExtractStr,...
                    'event_ex_param_str', config.eventExParamStr,...
                    'sync_period', config.syncPeriod,...
                    'toStream_sync_params', config.toStreamSyncParams,...
                    'niStream_sync_params', config.niStreamSyncParams,...
                    'tPrime_3A', config.tPrime3A,...
                    'toStream_path_3A', config.toStreamPath3A,...
                    'fromStream_list_3A', config.fromStreamList3A...
                )...
            );

            if config.runTPrime
                % TODO - reduce python
                params = strcat("-W ignore -m ecephys_spike_sorting.modules.tPrime_helper",...
                                " --input_json ", inputJson,...
                                " --output_json ", outputJson);
                obj.L.debug(strcat("TPrime.m - ", obj.Info), strcat("python ", params));
                py.py_modules.caller.call_python(params);
                obj.L.info(strcat("TPrime.m - ", obj.Info), "Done!");
            else
                obj.L.info(strcat("TPrime.m - ", obj.Info), "Skipped!");
            end
        end
    end
end